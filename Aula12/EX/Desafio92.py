'''
Criado por: Gui Castro

29/01/2025

Crie um programa onde 4 jogadores joguem um dado e tenham resultados aleat√≥rios. guarde esses resultados em um dicion√°rio. No final coloque esse dicion√°rio em ordem sabendo que o vencedor tirou o maior valor.

j 3
j 5
j 6
j 2

j 6
j 5
j 3
j 2
'''
from random import randint
from time import sleep
from operator import itemgetter
dicionario = {}
cont  = 1
for i in range(1,5):

    dicionario[f'Jodador{i}'] =  randint(1,6)

print('-=' * 30)
for k, v in dicionario.items():
    print(f'O {k} tirou {v}')
    sleep(1)

ranking = []

ranking = sorted(dicionario.items(), key=itemgetter(1), reverse=True)
print('-='* 15)
print(f'{"GANHADORES":^30}')
for i, v in enumerate(ranking):
    print(f'{i +1} lugar {v[0]} com {v[1]}')


ganhadores = sorted(dicionario.items(), key=lambda x: x[1], reverse=True)

ganhadores = dict(ganhadores)
print('-='* 15)
print(f'{"GANHADORES":^30}')
for k, v in ganhadores.items():

    print(f'O {cont}¬∫ colocado foi o, {k} que tirou um {v}')
    cont += 1
    sleep(1.0)
print('-='* 15)
print(f'{"O PROGRAMA ACABOU ! ! !":^30}')

'''
Ambas as express√µes fazem a mesma coisa: elas ordenam os itens de um dicion√°rio com base nos valores, em ordem decrescente. No entanto, h√° uma diferen√ßa na forma como a chave de ordena√ß√£o √© definida:

1. Usando itemgetter(1)
python
Copiar
Editar
from operator import itemgetter

ranking = sorted(dicionario.items(), key=itemgetter(1), reverse=True)
itemgetter(1) √© uma fun√ß√£o da biblioteca operator que retorna o segundo elemento de cada tupla (chave, valor).
Como dicionario.items() retorna uma lista de tuplas (chave, valor), o itemgetter(1) pega os valores e os usa para ordenar.
2. Usando lambda x: x[1]
python
Copiar
Editar
ganhadores = sorted(dicionario.items(), key=lambda x: x[1], reverse=True)
lambda x: x[1] √© uma fun√ß√£o an√¥nima que recebe um elemento (uma tupla (chave, valor)) e retorna x[1], ou seja, o valor do dicion√°rio.
Isso tamb√©m ordena com base nos valores, de forma id√™ntica ao itemgetter(1).
Ent√£o, qual a diferen√ßa?
itemgetter(1) √© um pouco mais eficiente, pois evita a sobrecarga de criar fun√ß√µes an√¥nimas dinamicamente.
lambda x: x[1] √© mais flex√≠vel, permitindo modifica√ß√µes mais facilmente, como mudar a chave de ordena√ß√£o para outra posi√ß√£o ou fazer c√°lculos adicionais.
Em resumo, para esse caso espec√≠fico, ambos fazem a mesma coisa, mas itemgetter(1) pode ser ligeiramente mais r√°pido.



Uma fun√ß√£o an√¥nima √© uma fun√ß√£o que n√£o tem nome. Em Python, usamos lambda para criar esse tipo de fun√ß√£o.

Exemplo de uma fun√ß√£o normal:
python
Copiar
Editar
def soma(a, b):
    return a + b

resultado = soma(2, 3)  # Retorna 5
Aqui, soma √© o nome da fun√ß√£o.

Exemplo de uma fun√ß√£o an√¥nima (lambda):
python
Copiar
Editar
soma = lambda a, b: a + b

resultado = soma(2, 3)  # Retorna 5
Nesse caso, a fun√ß√£o n√£o tem um nome expl√≠cito como def soma(), mas faz a mesma coisa.

Agora, voltando ao seu c√≥digo:

python
Copiar
Editar
ganhadores = sorted(dicionario.items(), key=lambda x: x[1], reverse=True)
Aqui, lambda x: x[1] √© uma fun√ß√£o an√¥nima que recebe um elemento x (que √© uma tupla (chave, valor)) e retorna x[1] (o valor do dicion√°rio).

Seria o mesmo que fazer:

python
Copiar
Editar
def pegar_valor(x):
    return x[1]

ganhadores = sorted(dicionario.items(), key=pegar_valor, reverse=True)
A vantagem do lambda √© que voc√™ pode definir fun√ß√µes pequenas diretamente dentro de express√µes sem precisar nome√°-las.



Usos de Fun√ß√µes An√¥nimas (lambda) na Vida Real
As fun√ß√µes an√¥nimas (lambda) s√£o √∫teis quando voc√™ precisa de uma fun√ß√£o curta e tempor√°ria, sem precisar definir um nome para ela. Elas s√£o muito usadas em:

Ordena√ß√£o de listas e dicion√°rios
Como j√° vimos, lambda √© √∫til para definir a chave de ordena√ß√£o:

python
Copiar
Editar
alunos = [
    {"nome": "Carlos", "nota": 8},
    {"nome": "Ana", "nota": 10},
    {"nome": "Bruno", "nota": 6}
]
# Ordenando por nota
ranking = sorted(alunos, key=lambda aluno: aluno["nota"], reverse=True)
print(ranking)
Filtros em listas (filter)
Para filtrar dados rapidamente sem precisar criar uma fun√ß√£o nomeada:

python
Copiar
Editar
numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
pares = list(filter(lambda x: x % 2 == 0, numeros))
print(pares)  # [2, 4, 6, 8, 10]
Transforma√ß√£o de listas (map)
Para modificar cada elemento de uma lista de forma concisa:

python
Copiar
Editar
quadrados = list(map(lambda x: x**2, numeros))
print(quadrados)  # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
Redu√ß√£o de listas (reduce)
Para acumular valores sem criar uma fun√ß√£o separada:

python
Copiar
Editar
from functools import reduce
soma = reduce(lambda x, y: x + y, numeros)
print(soma)  # 55 (soma de 1 a 10)
Diferen√ßa entre Fun√ß√£o An√¥nima e Fun√ß√£o Declarada
Caracter√≠stica	Fun√ß√£o An√¥nima (lambda)	Fun√ß√£o Declarada (def)
Nome	N√£o tem nome	Tem um nome espec√≠fico
Uso	Para opera√ß√µes r√°pidas e tempor√°rias	Para fun√ß√µes reutiliz√°veis e mais complexas
N√∫mero de express√µes	Apenas uma express√£o	Pode ter v√°rias linhas de c√≥digo
Legibilidade	Menos leg√≠vel quando complexa	Mais f√°cil de entender
Reutiliza√ß√£o	N√£o pode ser reutilizada fora do local onde foi definida	Pode ser chamada em v√°rios lugares
Suporte a return	Retorna implicitamente o valor da express√£o	Usa return explicitamente
Limita√ß√µes das Fun√ß√µes An√¥nimas (lambda)
S√≥ pode conter uma √∫nica express√£o

python
Copiar
Editar
lambda x: x * 2  # OK
Mas n√£o pode ter m√∫ltiplas instru√ß√µes:

python
Copiar
Editar
lambda x: print(x); x * 2  # ‚ùå Isso d√° erro!
N√£o pode conter estruturas de controle como if, for e while diretamente
Se precisar de l√≥gica mais complexa, uma fun√ß√£o def √© melhor:

python
Copiar
Editar
def verificar_par(x):
    if x % 2 == 0:
        return "Par"
    else:
        return "√çmpar"
Dificulta a depura√ß√£o (debug)
Como lambda n√£o tem nome, se ocorrer um erro, pode ser mais dif√≠cil de identificar no c√≥digo.

Conclus√£o: Quando usar lambda ou def?
Use lambda para fun√ß√µes curtas e descart√°veis, como ordena√ß√£o e filtros r√°pidos.
Use def para fun√ß√µes reutiliz√°veis ou com l√≥gica mais complexa.
Ou seja, se a fun√ß√£o for pequena e s√≥ usada uma vez, lambda pode ser uma boa escolha. Se precisar de reutiliza√ß√£o, manuten√ß√£o ou mais de uma linha de c√≥digo, use def.



No seu exemplo:

python
Copiar
Editar
soma = lambda a, b: a + b
print(soma(2, 3))  # 5

sub = 8 - 4
print(sub)  # 4
üîπ Usar lambda para opera√ß√µes simples como a + b n√£o traz muita vantagem sobre fazer a conta diretamente.

Quando faz sentido usar lambda?
Se a opera√ß√£o precisar ser passada como argumento para outra fun√ß√£o (ex: map, filter, sorted):

python
Copiar
Editar
numeros = [(1, 2), (3, 4), (5, 6)]
somas = list(map(lambda x: x[0] + x[1], numeros))
print(somas)  # [3, 7, 11]
Ou se quiser evitar criar uma fun√ß√£o nomeada para algo pequeno:

python
Copiar
Editar
soma = lambda a, b: a + b
print(soma(10, 20))  # 30
Quando N√ÉO faz sentido usar lambda?
Se a express√£o for simples e direta, usar uma vari√°vel comum √© mais leg√≠vel:

python
Copiar
Editar
sub = 8 - 4
print(sub)  # 4
Ou se precisar reutilizar a fun√ß√£o mais tarde:

python
Copiar
Editar
def soma(a, b):
    return a + b

print(soma(10, 20))  # 30
‚úÖ Conclus√£o: Para express√µes simples, usar lambda ou vari√°veis diretas n√£o faz muita diferen√ßa, mas lambda √© √∫til quando a fun√ß√£o precisa ser passada como argumento ou escrita inline.
'''