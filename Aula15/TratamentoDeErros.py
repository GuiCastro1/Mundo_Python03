'''
Tratamento de Erros e Exce√ß√µes

as vezes problema as vezes o problema nam sempre √© sintatico podem ser:

Erros de Sintaxe
Erros de Tipo e Valor
Erros Matem√°ticos
Erros de Entrada/Sa√≠da (I/O)
Erros de Importa√ß√£o
Erros de Mem√≥ria

Principais exce√ß√µes em Python
Exception ‚Äì Classe base para todas as exce√ß√µes.
BaseException ‚Äì Classe base para exce√ß√µes internas do Python.
KeyboardInterrupt ‚Äì Ocorre quando o usu√°rio interrompe a execu√ß√£o com Ctrl + C.
SystemExit ‚Äì Lan√ßada quando sys.exit() √© chamado.
GeneratorExit ‚Äì Ocorre quando um gerador fecha (close() √© chamado).
Erros Comuns
1. Erros de Sintaxe
SyntaxError ‚Äì Erro de sintaxe no c√≥digo.
IndentationError ‚Äì Problema de indenta√ß√£o (espa√ßos/tabs incorretos).
TabError ‚Äì Mistura de espa√ßos e tabs na indenta√ß√£o.
2. Erros de Tipo e Valor
TypeError ‚Äì Opera√ß√£o inv√°lida entre tipos incompat√≠veis.
ValueError ‚Äì Tipo de dado correto, mas valor inv√°lido.
IndexError ‚Äì √çndice fora do intervalo em listas ou tuplas.
KeyError ‚Äì Chave inexistente em um dicion√°rio.
AttributeError ‚Äì Atributo ou m√©todo inexistente em um objeto.
NameError ‚Äì Vari√°vel ou nome de fun√ß√£o n√£o definido.
UnboundLocalError ‚Äì Uso de vari√°vel local antes de ser definida.
3. Erros Matem√°ticos
ZeroDivisionError ‚Äì Divis√£o por zero.
OverflowError ‚Äì N√∫mero muito grande para ser representado.
FloatingPointError ‚Äì Erro em opera√ß√µes de ponto flutuante (raro).
4. Erros de Entrada/Sa√≠da (I/O)
FileNotFoundError ‚Äì Arquivo n√£o encontrado.
IOError ‚Äì Erro gen√©rico de entrada/sa√≠da.
PermissionError ‚Äì Permiss√£o negada ao acessar um arquivo.
IsADirectoryError ‚Äì Arquivo esperado, mas um diret√≥rio foi encontrado.
NotADirectoryError ‚Äì Diret√≥rio esperado, mas um arquivo foi encontrado.
5. Erros de Importa√ß√£o
ImportError ‚Äì M√≥dulo n√£o encontrado.
ModuleNotFoundError ‚Äì Subclasse de ImportError, mais espec√≠fica.
6. Erros de Itera√ß√£o
StopIteration ‚Äì Final de um iterador atingido.
StopAsyncIteration ‚Äì Final de um iterador ass√≠ncrono.
7. Erros de Mem√≥ria
MemoryError ‚Äì Mem√≥ria insuficiente para uma opera√ß√£o.
RecursionError ‚Äì Limite m√°ximo de recurs√£o atingido.
8. Outros Erros
AssertionError ‚Äì Falha em uma instru√ß√£o assert.
RuntimeError ‚Äì Erro gen√©rico de tempo de execu√ß√£o.
NotImplementedError ‚Äì M√©todo ou fun√ß√£o ainda n√£o implementado.
Exemplo de Tratamento de Erros
Aqui est√° um exemplo de como capturar exce√ß√µes usando try...except:

python
Copiar
Editar
try:
    x = int(input("Digite um n√∫mero: "))
    y = 10 / x
except ZeroDivisionError:
    print("Erro: Divis√£o por zero!")
except ValueError:
    print("Erro: Entrada inv√°lida, digite um n√∫mero inteiro.")
except Exception as e:
    print(f"Erro inesperado: {e}")
else:
    print(f"Resultado: {y}")
finally:
    print("Fim do programa.")
Se quiser mais detalhes sobre uma exce√ß√£o espec√≠fica, me avise! üöÄ
'''
x = 'Hello, World ! ! !'
print(x)

'''
Sintax
# try:
#     opera√ß√£o

# except:
#     falhou

else & fanally n√£o s√£o obrogat√≥rias

1 try pode ter varios except
'''

try:

    a = int(input('Digite um n√∫mero:'))
    b = int(input('Digite outro n√∫mero:'))
    r = a / b

except (ValueError, TypeError):
    print('Infelizmente tivemos um problema com os tipos de dados que voc√™ digitou')
except ZeroDivisionError:
    print('Infelizmente tivemos n√£o e√© possivel dividir um n√∫mero por 0')
except Exception as Erro:
    print(f'Infelizmente tivemos um problema o ERRO encontrado foi {Erro.__cause__}')

else:
    print(f'O resultado √© {r}')

finally:
    print('Volte sempre ! ! !')